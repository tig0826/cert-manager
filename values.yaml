COMPUTED VALUES:
acmesolver:
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/jetstack/cert-manager-acmesolver
affinity: {}
approveSignerNames:
- issuers.cert-manager.io/*
- clusterissuers.cert-manager.io/*
cainjector:
  affinity: {}
  config: {}
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  enableServiceLinks: false
  enabled: true
  extraArgs: []
  extraEnv: []
  featureGates: ""
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/jetstack/cert-manager-cainjector
  nodeSelector:
    kubernetes.io/os: linux
  podDisruptionBudget:
    enabled: false
  podLabels: {}
  replicaCount: 1
  resources: {}
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  serviceAccount:
    automountServiceAccountToken: true
    create: true
  serviceLabels: {}
  strategy: {}
  tolerations: []
  topologySpreadConstraints: []
  volumeMounts: []
  volumes: []
clusterResourceNamespace: ""
config: {}
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
crds:
  enabled: false
  keep: true
creator: helm
disableAutoApproval: false
dns01RecursiveNameservers: ""
dns01RecursiveNameserversOnly: false
enableCertificateOwnerRef: false
enableServiceLinks: false
enabled: true
extraArgs: []
extraEnv: []
extraObjects: []
featureGates: ""
fullnameOverride: cert-manager
global:
  cattle:
    clusterId: c-m-2g46tbjx
    clusterName: k8s-home
    rkePathPrefix: ""
    rkeWindowsPathPrefix: ""
    systemProjectId: p-jrfqn
    url: https://192.168.0.100
  commonLabels: {}
  imagePullSecrets: []
  leaderElection:
    namespace: kube-system
  logLevel: 2
  podSecurityPolicy:
    enabled: false
    useAppArmor: true
  priorityClassName: ""
  rbac:
    aggregateClusterRoles: true
    create: true
hostAliases: []
image:
  pullPolicy: IfNotPresent
  repository: quay.io/jetstack/cert-manager-controller
ingressShim: {}
installCRDs: false
livenessProbe:
  enabled: true
  failureThreshold: 8
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 15
maxConcurrentChallenges: 60
namespace: ""
nodeSelector:
  kubernetes.io/os: linux
podDisruptionBudget:
  enabled: false
podLabels: {}
prometheus:
  enabled: true
  podmonitor:
    annotations: {}
    enabled: false
    endpointAdditionalProperties: {}
    honorLabels: false
    interval: 60s
    labels: {}
    path: /metrics
    prometheusInstance: default
    scrapeTimeout: 30s
  servicemonitor:
    annotations: {}
    enabled: false
    endpointAdditionalProperties: {}
    honorLabels: false
    interval: 60s
    labels: {}
    path: /metrics
    prometheusInstance: default
    scrapeTimeout: 30s
    targetPort: http-metrics
replicaCount: 1
resources: {}
securityContext:
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault
serviceAccount:
  automountServiceAccountToken: true
  create: true
startupapicheck:
  affinity: {}
  backoffLimit: 4
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  enableServiceLinks: false
  enabled: true
  extraArgs:
  - -v
  extraEnv: []
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/jetstack/cert-manager-startupapicheck
  jobAnnotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "1"
  nodeSelector:
    kubernetes.io/os: linux
  podLabels: {}
  rbac:
    annotations:
      helm.sh/hook: post-install
      helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
      helm.sh/hook-weight: "-5"
  resources: {}
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  serviceAccount:
    annotations:
      helm.sh/hook: post-install
      helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
      helm.sh/hook-weight: "-5"
    automountServiceAccountToken: true
    create: true
  timeout: 5m
  tolerations: []
  volumeMounts: []
  volumes: []
strategy: {}
tolerations: []
topologySpreadConstraints: []
volumeMounts: []
volumes: []
webhook:
  affinity: {}
  config: {}
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  enableServiceLinks: false
  extraArgs: []
  extraEnv: []
  featureGates: ""
  hostNetwork: false
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/jetstack/cert-manager-webhook
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  mutatingWebhookConfiguration:
    namespaceSelector: {}
  networkPolicy:
    egress:
    - ports:
      - port: 80
        protocol: TCP
      - port: 443
        protocol: TCP
      - port: 53
        protocol: TCP
      - port: 53
        protocol: UDP
      - port: 6443
        protocol: TCP
      to:
      - ipBlock:
          cidr: 0.0.0.0/0
    enabled: false
    ingress:
    - from:
      - ipBlock:
          cidr: 0.0.0.0/0
  nodeSelector:
    kubernetes.io/os: linux
  podDisruptionBudget:
    enabled: false
  podLabels: {}
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources: {}
  securePort: 10250
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  serviceAccount:
    automountServiceAccountToken: true
    create: true
  serviceIPFamilies: []
  serviceIPFamilyPolicy: ""
  serviceLabels: {}
  serviceType: ClusterIP
  strategy: {}
  timeoutSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
  url: {}
  validatingWebhookConfiguration:
    namespaceSelector:
      matchExpressions:
      - key: cert-manager.io/disable-validation
        operator: NotIn
        values:
        - "true"
  volumeMounts: []
  volumes: []
